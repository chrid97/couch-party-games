{"version":3,"sources":["images/magnifying-glass.svg","pages/home/header.tsx","components/card.tsx","pages/home/game-categories.tsx","pages/game/game-page.tsx","pages/game/game-card.tsx","pages/browse-games/game-list.tsx","components/filter-input.tsx","pages/browse-games/filters.tsx","pages/browse-games/browse.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","src","MagnifyingGlass","alt","type","placeholder","Card","title","to","Section","GamePage","games","gameSlug","useParams","game","find","slug","undefined","backgroundUrl","cover","screenshots","image_id","style","backgroundImage","name","platforms","map","platform","key","id","summary","GameCard","GameList","FilterInput","text","defaultValue","Filters","Browse","Navbar","path","Home","App","useState","setGames","useEffect","axios","get","then","res","data","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f5680695.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/magnifying-glass.57ab24fd.svg\";","import React from 'react';\r\nimport MagnifyingGlass from '../../images/magnifying-glass.svg';\r\nimport './header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header center\">\r\n      <div className=\"center main\">\r\n        <h1>\r\n          Discover what <span className=\"color\">games</span> you&lsquo;ll play with your friends!\r\n        </h1>\r\n        <div className=\"search-bar center\">\r\n          <img src={MagnifyingGlass} alt=\"Magnifying Glass\" />\r\n          <input className=\"search\" type=\"text\" placeholder=\"Type in your favorite game to get similar games!\"></input>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './card.css'\n\nfunction Card({ title }: { title: string }) {\n  return (\n    <Link to=\"/browse\" className=\"card center\">\n      <h2>{title}</h2>\n      <button>Browse Games</button>\n    </Link>\n  );\n}\n\nexport default Card;","import React from 'react';\r\nimport './game-categories.css';\r\nimport Card from  '../../components/card';\r\n\r\nfunction Section() {\r\n  return (\r\n    <section className=\"game-categories center\">\r\n      <section className=\"section2\">\r\n        <Card title=\"Campaign Co-Op\" />\r\n        <Card title=\"Couch Co-Op\" />\r\n        <Card title=\"Online Co-Op\" />\r\n        <Card title=\"Massively Multiplayer\" />\r\n      </section>\r\n    </section>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport { Game } from '../../types/Game';\r\nimport { useParams } from 'react-router-dom';\r\nimport './game-page.css';\r\nimport CarouselItem from './carousel-item';\r\n\r\ninterface ParamTypes {\r\n  gameSlug: string;\r\n}\r\n\r\nfunction GamePage({ games }: { games: Game[] }) {\r\n  const { gameSlug } = useParams<ParamTypes>();\r\n  const game: Game | undefined = games.find((game) => game.slug === gameSlug);\r\n\r\n  if (game === undefined) {\r\n    return <div>404</div>;\r\n  }\r\n\r\n  let backgroundUrl = ``;\r\n  if (game.cover !== undefined) {\r\n    backgroundUrl = `https://images.igdb.com/igdb/image/upload/t_1080p/${game.screenshots[2].image_id}.jpg`;\r\n  } else {\r\n    backgroundUrl = 'http://placehold.it/360x360';\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"carousel center\">\r\n        <div style={{ backgroundImage: `url(${backgroundUrl})` }} className=\"banner\"></div>\r\n        {/* <div className=\"carousel-items\">\r\n          <CarouselItem />\r\n        </div> */}\r\n      </div>\r\n      <div className=\"game-content\">\r\n        <div className=\"header2\">\r\n          <div className=\"main-content\">\r\n            <h1>{game.name}</h1>\r\n            <div>\r\n              Platforms:{' '}\r\n              {game.platforms.map((platform) => (\r\n                <span key={platform.id}>{platform.name} | </span>\r\n              ))}\r\n            </div>\r\n            <div># of Players Platform Genre Theme</div>\r\n            <p className=\"summary\">{game.summary}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"images\">\r\n          {game.screenshots.map((screenshots) => (\r\n            <img\r\n              key={screenshots.id}\r\n              src={`https://images.igdb.com/igdb/image/upload/t_1080p/${screenshots.image_id}.jpg`}\r\n              alt=\"game\"\r\n            ></img>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GamePage;\r\n","import React from 'react';\r\nimport './game-card.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { Game } from '../../types/Game';\r\n\r\nfunction GameCard({ game }: { game: Game }) {\r\n  let backgroundUrl = ``;\r\n  if (game.cover !== undefined) {\r\n    backgroundUrl = `https://images.igdb.com/igdb/image/upload/t_1080p/${game.cover.image_id}.jpg`;\r\n  } else {\r\n    backgroundUrl = 'http://placehold.it/360x360';\r\n  }\r\n  return (\r\n    <Link to={`/games/${game.slug}`} className=\"game-card\">\r\n      <div\r\n        style={{\r\n          backgroundImage: `url(${backgroundUrl})`,\r\n        }}\r\n        className=\"card2\"\r\n      ></div>\r\n      <p>{game.name}</p>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default GameCard;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Game } from '../../types/Game';\r\nimport './game-list.css';\r\nimport GameCard from '../game/game-card';\r\n\r\nfunction GameList({ games }: { games: Game[] }) {\r\n  return (\r\n    <div className=\"game-list\">\r\n      {games.map((game) => (\r\n        <GameCard key={game.id} game={game} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameList;\r\n","import React from 'react';\r\nimport './filter-input.css';\r\n\r\nfunction FilterInput({ text }: { text: string }) {\r\n  return (\r\n    <div>\r\n      <div className=\"name\">{text}</div>\r\n      <div>\r\n        <select defaultValue=\"Any\" className=\"filter-input\"></select>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FilterInput;\r\n","import React from 'react';\r\nimport './filters.css';\r\nimport FilterInput from '../../components/filter-input';\r\n\r\nfunction Filters() {\r\n  return (\r\n    <div className=\"filters\">\r\n      <FilterInput text=\"Type of Co-Op\" />\r\n      <FilterInput text=\"# of Players\" />\r\n      <FilterInput text=\"Genres\" />\r\n      <FilterInput text=\"Themes\" />\r\n      <FilterInput text=\"Keywords\" />\r\n      <FilterInput text=\"Platforms\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Filters;\r\n","import React from 'react';\r\nimport { Game } from '../../types/Game';\r\nimport './browse.css';\r\nimport GameList from './game-list';\r\nimport Filters from './filters';\r\n\r\nfunction Browse({ games }: { games: Game[] }) {\r\n  return (\r\n    <div className=\"browse\">\r\n      <Filters />\r\n      <GameList games={games} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Browse;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport './App.css';\r\nimport Header from './pages/home/header';\r\nimport Section from './pages/home/game-categories';\r\nimport axios from 'axios';\r\nimport { Game } from './types/Game';\r\nimport GamePage from './pages/game/game-page';\r\nimport Browse from './pages/browse-games/browse';\r\n\r\nfunction App() {\r\n  const [games, setGames] = useState([]);\r\n  useEffect(() => {\r\n    axios.get('http://localhost:4000/json').then((res) => {\r\n      setGames(res.data);\r\n      console.log(res);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App center\">\r\n      <Navbar games={games} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Navbar({ games }: { games: Game[] }) {\r\n  return (\r\n    <Router>\r\n      <nav className=\"nav center\">\r\n        <Link to=\"/\">Home</Link>\r\n        <Link to=\"/browse\">Browse</Link>\r\n      </nav>\r\n\r\n      <Switch>\r\n        <Route path=\"/browse\">\r\n          <Browse games={games} />\r\n        </Route>\r\n        <Route path=\"/games/:gameSlug\">\r\n          <GamePage games={games} />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Home />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nfunction Home() {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Section />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}